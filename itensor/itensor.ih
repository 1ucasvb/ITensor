//
// Distributed under the ITensor Library License, Version 1.2
//    (See accompanying LICENSE file.)
//
#ifndef __ITENSOR_ITENSOR_IH
#define __ITENSOR_ITENSOR_IH

//
// Template Method Implementations
//

namespace itensor {

template <typename... Indices>
ITensor::
ITensor(const Index& i1, 
        const Index& i2,
        const Index& i3,
        const Indices&... rest)
    :
    is_(i1,i2,i3,rest...),
    scale_(1.),
    store_(make_shared<ITDense<Real>>(area(is_),0.))
	{ }

template<typename... Inds>
ITensor::
ITensor(Complex z, 
        const Index& i1,
        const Inds&... inds)
    :
    is_(i1,inds...),
    scale_(1.)
    { 
    if(z.imag() == 0)
        store_ = make_shared<ITDiag<Real>>(z.real());
    else
        store_ = make_shared<ITDiag<Complex>>(z);
    }

template<typename... Inds>
ITensor::
ITensor(const VectorRef& V, 
        const Index& i1,
        const Inds&... inds)
    :
    is_(i1,inds...),
    scale_(1.),
    store_(std::make_shared<ITDiag<Real>>(V.begin(),V.end()))
    { 
#ifdef DEBUG
    //Compute min of all index dimensions
    long minm = i1.m();
    for(const auto& ind : is_)
        if(ind.m() < minm) minm = ind.m();
    if(V.Length() != minm)
        {
        Print(minm);
        Print(V.Length());
        Error("Wrong size of data in diagonal ITensor constructor");
        }
#endif
    }


template <typename... IVals>
ITensor::
ITensor(const IndexVal& iv1, 
        const IVals&... rest)
    :
    scale_(1.)
    {
    const size_t size = 1+sizeof...(rest);
    auto ivs = std::array<IndexVal,size>{{iv1,rest...}};
    std::array<Index,size> inds;
    for(size_t j = 0; j < size; ++j) inds[j] = ivs[j].index;
    is_ = IndexSet(inds);
    store_ = make_shared<ITDense<Real>>(area(is_),0.);
    set(1.,iv1,rest...);
    }


template <typename... IndexVals>
Complex ITensor::
cplx(IndexVals&&... ivs) const
    {
    constexpr auto size = sizeof...(ivs);
#ifdef DEBUG
    if(!*this) Error("ITensor is default constructed");
    if(size > r()) Error("Too many IndexVals passed to real/cplx");
#endif
    std::array<IndexVal,size> vals{{static_cast<IndexVal>(ivs)...}};
    std::array<long,size> inds;
    detail::permute_map(is_,vals,inds,[](const IndexVal& iv) { return iv.i-1; });
    Complex z = applyFunc<GetElt<Complex,size>>(store_,{is_,inds});
	try {
	    return z*scale_.real(); 
	    }
	catch(const TooBigForReal& e)
	    {
	    println("too big for real in cplx(...), scale = ",scale());
	    throw e;
	    }
	catch(TooSmallForReal)
	    {
        println("warning: too small for real in cplx(...)");
	    return Complex(0.,0.);
	    }
    return Complex(NAN,NAN);
    }


template <typename... IndexVals>
Real ITensor::
real(IndexVals&&... ivs) const
    {
    auto z = cplx(std::forward<IndexVals>(ivs)...);
    if(fabs(z.imag()) != 0)
        {
        printfln("element = (%.5E,%.5E)",z.real(),z.imag());
        Error("ITensor is Complex-valued, use .cplx(...) method");
        }
    return z.real();
    }


template <typename... IndexVals>
void ITensor::
set(Complex val, const IndexVals&... ivs)
    {
    static constexpr auto size = sizeof...(ivs);
    scaleTo(1.);
    const std::array<IndexVal,size> vals{{ static_cast<IndexVal>(ivs)...}};
    std::array<long,size> inds;
    detail::permute_map(is_,vals,inds,[](const IndexVal& iv) { return iv.i-1; });
    if(val.imag() == 0)
        applyFunc<SetEltReal<size>>(store_,{val.real(),is_,inds});
    else
        applyFunc<SetEltComplex<size>>(store_,{val,is_,inds});
    }

template <typename Func>
ITensor& ITensor::
generate(Func&& f)
    {
    scaleTo(1);
    applyFunc<GenerateIT<decltype(f)>>(store_,{std::forward<Func>(f)});
    return *this;
    }

template <typename Func>
ITensor& ITensor::
apply(Func&& f)
    {
    scaleTo(1);
    applyFunc<ApplyIT<decltype(f)>>(store_,{std::forward<Func>(f)});
    return *this;
    }

template <typename Func>
const ITensor& ITensor::
visit(Func&& f) const
    {
    applyFunc<VisitIT<decltype(f)>>(store_,{std::forward<Func>(f),scale_.real0()});
    return *this;
    }


template <class Tensor>
Tensor
swapPrime(Tensor T, int plev1, int plev2,
          IndexType type)
    { 
    int tempLevel = 100;
#ifdef DEBUG
    for(const auto& I : T.inds())
        {
        if(I.primeLevel() == tempLevel) 
            {
            Print(tempLevel);
            Error("swapPrime fails if an index has primeLevel==tempLevel");
            }
        }
#endif
    T.mapprime(plev1,tempLevel,type);
    T.mapprime(plev2,plev1,type);
    T.mapprime(tempLevel,plev2,type);
    return T; 
    }

template<class TensorA, class TensorB> typename 
TensorA::IndexT
commonIndex(const TensorA& A, const TensorB& B, IndexType t)
    {
    using IndexT = typename TensorA::IndexT;
    for(const IndexT& I : A.inds())
        {
        if( (t == All || I.type() == t)
         && hasindex(B.inds(),I) ) 
            {
            return I;
            }
        }
    return IndexT();
    }


template<class TensorA, class TensorB> typename 
TensorA::IndexT
uniqueIndex(const TensorA& A, 
            const TensorB& B, 
            IndexType t)
    {
    using IndexT = typename TensorA::IndexT;
    for(const IndexT& I : A.inds())
        {
        if( (t == All || I.type() == t)
         && !hasindex(B.inds(),I) ) 
            {
            return I;
            }
        }
    return IndexT::Null();
    }


}; //namespace itensor


#endif
