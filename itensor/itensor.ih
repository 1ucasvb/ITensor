//
// Distributed under the ITensor Library License, Version 1.2
//    (See accompanying LICENSE file.)
//
#ifndef __ITENSOR_ITENSOR_IH_
#define __ITENSOR_ITENSOR_IH_

//
// Template Method Implementations
//

namespace itensor {

//template<>
//template <typename... IVals>
//ITensor::
//ITensorT(const IndexVal& iv1, 
//         const IVals&... rest)
//  : scale_(1.)
//    {
//    const size_t size = 1+sizeof...(rest);
//    auto ivs = std::array<IndexVal,size>{{iv1,rest...}};
//    std::array<Index,size> inds;
//    for(size_t j = 0; j < size; ++j) inds[j] = ivs[j].index;
//    is_ = IndexSet(inds);
//    store_ = newITData<DenseReal>(area(is_),0.);
//    set(iv1,rest...,1.);
//    }

// TODO: implement special code for doing this operation
//       more efficiently
inline ITensor& 
operator*=(ITensor & T, IndexVal const& iv) { return T *= pick(iv); } 
ITensor inline
operator*(IndexVal const& iv, ITensor const& B) 
    { 
    auto A = pick(iv);
    A *= B; 
    return A; 
    }

ITensor inline
operator*(IndexVal const& iv1, IndexVal const& iv2) 
    { 
    auto t = pick(iv1);
    return (t *= iv2); 
    }

ITensor inline
operator*(IndexVal const& iv1, Real val) 
    { 
    auto res = pick(iv1);
    res *= val; 
    return res; 
    }

template<typename... Inds>
ITensor
diag(Complex z, 
     Index const& i1,
     Inds&&... inds)
    { 
    IndexSet is(i1,std::forward<Inds>(inds)...);
    auto len = minM(is);
    if(z.imag() == 0) return ITensor(std::move(is),Diag<Real>(len,z.real()));
    return ITensor(std::move(is),Diag<Complex>(len,z));
    }

template<typename Container, typename... Inds, class>
ITensor
diag(Container const& C, 
     Index const& i1,
     Inds &&... inds)
    { 
    IndexSet is(i1,std::forward<Inds>(inds)...);
#ifdef DEBUG
    using size_type = decltype(C.size());
    //Compute min of all index dimensions
    auto minm = i1.m();
    for(const auto& ind : is)
        if(ind.m() < minm) minm = ind.m();
    if(C.size() != size_type(minm))
        {
        Print(minm);
        Print(C.size());
        Error("Wrong size of data in diagonal ITensor constructor");
        }
#endif
    using value_type = typename Container::value_type;
    return ITensor(std::move(is),Diag<value_type>(C.begin(),C.end()));
    }


template<typename IndexT>
ITensorT<IndexT>
randomTensor(const IndexSetT<IndexT>& inds)
    {
    return random(ITensorT<IndexT>{inds});
    }


} //namespace itensor


#endif
