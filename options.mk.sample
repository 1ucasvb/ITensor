### User Configurable Options

## Set equal to yes to tell ITensor your compiler supports C++11
## (Also make sure to add a flag like -std=c++11 to the CCCOM variable below.)
## If this is set to no, you must defined BOOST_DIR below
## to point to the location of the Boost C++ library headers
USE_CPP11=no

## Set which compiler to use:

##GNU GCC compiler, consider adding flag -std=c++11 to enable newer C++11 features
CCCOM=g++ -m64
##Clang compiler (good to use on Mac OS), consider adding flag -std=c++1y to enable newer C++14 features
#CCCOM=clang++
##Intel C++ compiler (good to use with Intel MKL if available), consider adding -std=c++11
#CCCOM=icpc

## Location of boost (this folder should have another one called 'boost' inside it)
## Only required if USE_CPP11=no
BOOST_DIR=$(HOME)/boost

## Flags to give the compiler for "release mode"
OPTIMIZATIONS=-O2 -DNDEBUG -Wall -DBOOST_DISABLE_ASSERTS

## Flags to give the compiler for "debug mode"
DEBUGFLAGS=-DDEBUG -DMATRIXBOUNDS -DITENSOR_USE_AT -DBOUNDS -g -Wall

###
###BLAS/LAPACK Related Options
###

##
## Mac OSX system (include flags intentionally left blank)
##

PLATFORM=macos
BLAS_LAPACK_LIBFLAGS=-framework Accelerate
BLAS_LAPACK_INCLUDEFLAGS=

##
## Example using a C interface to LAPACK on GNU/LINUX systems
## make sure to install LAPACKE development header needed by lapack_wrap.h
##

#PLATFORM=lapack
#BLAS_LAPACK_INCLUDEFLAGS=-I/usr/include
#BLAS_LAPACK_LIBFLAGS=-L/usr/lib -lblas -llapack 

##
## Example using a C interface to LAPACK on GNU/LINUX systems
## make sure to install LAPACKE development header needed by lapack_wrap.h
##

#PLATFORM=lapack
#BLAS_LAPACK_INCLUDEFLAGS=-I/usr/include
#BLAS_LAPACK_LIBFLAGS=-L/usr/lib -lblas -llapack 

##
## Example using the Intel MKL library
##

#PLATFORM=mkl
## MKL example for GNU/Linux systems (recommended with Intel C++ compiler icpc for performance on Intel CPUs)
#BLAS_LAPACK_INCLUDEFLAGS=-I/opt/intel/composer_xe_2013_sp1.1.106/mkl/include
#BLAS_LAPACK_LIBFLAGS=-L/opt/intel/composer_xe_2013_sp1.1.106/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_rt -lmkl_core -liomp5 -lpthread
## MKL example for other UNIX flavours
#BLAS_LAPACK_INCLUDEFLAGS=-I/sopt/intel/mkl/10.1.0.015/include
#BLAS_LAPACK_LIBFLAGS=-L/sopt/intel/mkl/10.1.0.015/lib/em64t -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lgfortran -lpthread

##
## Example using the AMD ACML library
##

#PLATFORM=acml
#BLAS_LAPACK_INCLUDEFLAGS=-I/opt/acml5.1.0/gfortran64/include
#BLAS_LAPACK_LIBFLAGS=-L/opt/acml5.1.0/gfortran64/lib -lacml -lgfortran -lpthread




#########
######### End BLAS/LAPACK Related Options
#########

### Other variables defined for convenience.
### Not necessary to modify these for most cases.

PREFIX=$(THIS_DIR)

ifeq ($(USE_CPP11),yes)
CCCOM += -DUSE_CPP11
endif
ifeq ($(USE_CPP11),true)
CCCOM += -DUSE_CPP11
endif

ITENSOR_LIBDIR=$(PREFIX)/lib
ITENSOR_INCLUDEDIR=$(PREFIX)/include

ITENSOR_LIBNAMES=itensor matrix utilities
ITENSOR_LIBFLAGS=$(patsubst %,-l%, $(ITENSOR_LIBNAMES))
ITENSOR_LIBFLAGS+= $(BLAS_LAPACK_LIBFLAGS)
ITENSOR_LIBGFLAGS=$(patsubst %,-l%-g, $(ITENSOR_LIBNAMES))
ITENSOR_LIBGFLAGS+= $(BLAS_LAPACK_LIBFLAGS)
ITENSOR_LIBS=$(patsubst %,$(ITENSOR_LIBDIR)/lib%.a, $(ITENSOR_LIBNAMES))
ITENSOR_GLIBS=$(patsubst %,$(ITENSOR_LIBDIR)/lib%-g.a, $(ITENSOR_LIBNAMES))

ITENSOR_INCLUDEFLAGS=-I$(ITENSOR_INCLUDEDIR) $(BLAS_LAPACK_INCLUDEFLAGS)
ifdef BOOST_DIR 
ITENSOR_INCLUDEFLAGS += -I$(BOOST_DIR)
endif

CCFLAGS=-I. $(ITENSOR_INCLUDEFLAGS) $(OPTIMIZATIONS) -Wno-unused-variable
CCGFLAGS=-I. $(ITENSOR_INCLUDEFLAGS) $(DEBUGFLAGS)
LIBFLAGS=-L$(ITENSOR_LIBDIR) $(ITENSOR_LIBFLAGS)
LIBGFLAGS=-L$(ITENSOR_LIBDIR) $(ITENSOR_LIBGFLAGS)

